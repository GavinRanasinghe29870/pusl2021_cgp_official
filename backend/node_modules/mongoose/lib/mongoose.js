const express = require('express')
const bcrypt = require('bcryptjs')
const jwt = require('jsonwebtoken')
const SignupUser = require('../../../models/sportPeople/signup') //Imports the User model 
const router = express.Router()

// User Sign-Up Route
router.post("/signup", async (req, res) => {
  try {
      const { firstName, age, username, password, mobile, address, email, sportLevel, gender, role } = req.body;
      
      // Check if user already exists
      const existingUser = await SignupUser.findOne({ username });
      if (existingUser) return res.status(400).json({ message: 'Username already exists' });
      
      const hashedPassword = await bcrypt.hash(password, 10);
      
      const newUser = new SignupUser({ 
        firstName, 
        age, 
        username, 
        password: hashedPassword, 
        mobile, 
        address, 
        email, 
        sportLevel, 
        gender,
        role: role || 'user' // Default role if not provided
      });
      await newUser.save();

      res.status(201).json({ message: "User registered successfully!" });
  } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error registering user" });
  }
});

// User Sign-In Route
router.post('/signin', async (req, res) => {
  const { username, password } = req.body;

  try {
      const user = await SignupUser.findOne({ username });
      if (!user) return res.status(404).json({ message: 'User not found' });

      const isValidPassword = await bcrypt.compare(password, user.password);
      if (!isValidPassword) return res.status(401).json({ message: 'Invalid credentials' });

      const token = jwt.sign(
        { id: user._id, role: user.role }, 
        process.env.JWT_SECRET, 
        { expiresIn: "1h" }
      );
      
      res.json({ 
        token, 
        userId: user._id,
        role: user.role,
        message: 'Sign in successful' 
      });
  } catch (error) {
      console.error(error);
      res.status(500).json({ message: 'Server error' });
  } 
});

module.exports = router